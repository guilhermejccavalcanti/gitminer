import net.wagstrom.research.github.IndexNames
import net.wagstrom.research.github.IdCols
import net.wagstrom.research.github.VertexType
import net.wagstrom.research.github.PropertyName
import net.wagstrom.research.github.EdgeType

/**
 * simple helper function to do a pretty print of a map
 *
 * @param inmap an key/value pair map
 */
def printSortedMap(Map inmap) {
	for (p in inmap.sort{a,b -> a.key <=> b.key}) {
		println "==>" + p.key + "=" + p.value
	}
}

DBPATH="/users/pwagstro/Documents/workspace/github/graph.20120210.db"
g = new Neo4jGraph(DBPATH)

repos = ["ruby/ruby", "rails/rails", "mojombo/jekyll", "defunkt/resque", "mxcl/homebrew", "lifo/docrails", "puppetlabs/puppet", "tinkerpop/gremlin", "tinkerpop/blueprints", "tinkerpop/pipes", "tinkerpop/rexster", "tinkerpop/frames", "rack/rack", "sinatra/sinatra"]
eventTypes = ["closed", "subscribed", "referenced", "mentioned", "merged", "unsubscribed", "assigned", "reopened"].sort()

repoidx = g.idx(IndexNames.REPOSITORY)

for (reponame in repos) {
	println "*************************"
	printf("Repo: %s\n", [reponame])
	repo = repoidx.get(IdCols.REPOSITORY, reponame).next()
	printf("Issues: %d\n", [repo.out("ISSUE").count()])
	for (event in eventTypes) {
		issueIds = [:]
		numEvent = 0
		repo.out("ISSUE").out("ISSUE_EVENT").filter{it.event==event}.sideEffect{numEvent +=1}.in("ISSUE_EVENT").issue_id.groupCount(issueIds).iterate()
		issueClosedHist = [:].withDefault{0}
		issueIds.each{k,v -> issueClosedHist[v] += 1}
		printf("event: %s num: %d\n", [event, numEvent])
		printSortedMap(issueClosedHist)
	}
	println("\n\n")
}

g.shutdown()
