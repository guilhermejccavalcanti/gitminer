/**
 * Generate summary statistics about the number of times each event
 * occurred on issues related to each repo.
 * 
 * Repo: mxcl/homebrew
 * Commits: 1735
 * Deltas: 0
 * Unique Files: 0
 * Issues: 10604
 * event: closed num: 5768
 * ==>1=5340
 * ==>2=183
 * ==>3=18
 * ==>4=2
 * 
 * For example, this means there have 5768 close events. 5340 issues
 * have only a single close event. 183 have two close events, etc.
 */
import net.wagstrom.research.github.IndexNames
import net.wagstrom.research.github.IdCols
import net.wagstrom.research.github.VertexType
import net.wagstrom.research.github.PropertyName
import net.wagstrom.research.github.EdgeType

g = new Neo4jGraph(Defaults.DBPATH)

repoidx = g.idx(IndexNames.REPOSITORY)

for (reponame in Defaults.PROJECTS) {
    println "*************************"
    println "Repo: " + reponame
    repo = repoidx.get(IdCols.REPOSITORY, reponame).next()
    println "Commits: " + repo.in(EdgeType.REPOSITORY).count()
    println "Deltas: " + repo.in(EdgeType.REPOSITORY).out(EdgeType.CHANGED).count()
    println "Unique Files: " + repo.in(EdgeType.REPOSITORY).out(EdgeType.CHANGED).dedup().count()

    println "Issues: " + repo.out(EdgeType.ISSUE).count()
    for (event in Defaults.EVENT_TYPES) {
        issueIds = [:]
        numEvent = 0
        repo.out(EdgeType.ISSUE).out(EdgeType.ISSUEEVENT).filter{it.event==event}.sideEffect{numEvent +=1}.in(EdgeType.ISSUEEVENT).issue_id.groupCount(issueIds).iterate()
        issueClosedHist = [:].withDefault{0}
        issueIds.each{k,v -> issueClosedHist[v] += 1}
        println "event: " + event + " num: " + numEvent
        Helpers.printSortedMap(issueClosedHist)
    }
    println "\n"
}

g.shutdown()